
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner; 
  
// A directed graph using 
// adjacency list representation 
public class chimps {
	public int temp;
	private int V;   // No. of vertices
	public static int edgeCount=Integer.parseInt(input().get(0));
	public static int counter1= 0;
	public static int counter2 = 0;
	public static int counter3 = 0;
	public static int start = 0;
	static int [][] edges = new int[edgeCount][edgeCount];
	static int [][] paths = new int[edgeCount][edgeCount];
	  
    // Array  of lists for Adjacency List Representation 
    private LinkedList<Integer> adjacent[]; 
  
    // Constructor 
    chimps(int v) 
    { 
        V = v; 
        adjacent = new LinkedList[v]; 
        for (int i=0; i<v; ++i) 
        {
            adjacent[i] = new LinkedList(); 
        }
    } 
  
    //Function to add an edge into the graph 
    void addEdge(int v, int a) 
    { 
        adjacent[v].add(a);  // Add w to v's list. 
    } 
  
    // A function used by DFS 
    void searchHelp(int v,boolean visited[]) 
    { 
        // Mark the current node as visited and print it 
    	visited[v] = true;

    	temp = v;
    	edges[counter1][counter2] = v;
    	counter2++;
          
        // Recur for all the vertices adjacent to this vertex 
        Iterator<Integer> iterator = adjacent[v].listIterator(); 
        while (iterator.hasNext()) 
        { 
            int next = iterator.next();
            if (!visited[next]) 
            {
                searchHelp(next, visited);
            }
            if(visited[next]) 
            {
            	//System.out.println(n);
            	if((start == next))
            	{	
            		paths[counter1][counter3]=v;
            		counter3++;
            	}	
            }
        }   
    } 
  
    // The function to do DFS traversal. It uses recursive DFSUtil() 
    void search(int v) 
    { 
        // Mark all the vertices as not visited(set as 
        // false by default in java) 
        boolean visited[] = new boolean[V];
        // Call the recursive helper function to print DFS traversal 
        counter2 = 0;
        counter3 = 0;
        searchHelp(v, visited);
     
    }
    
    public static ArrayList<String> input() 
	{
		ArrayList<String> list1 = new ArrayList<String>();

		File file = new File ("input1.txt");
		try 
		{
			Scanner scan = new Scanner(file);
			while(scan.hasNextLine())
			{
	    		list1.add(scan.nextLine());
	    	}
			scan.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		return list1;
	}
    
    public static ArrayList<Integer> format()
	{
		ArrayList<String> string = input();
		ArrayList<Integer> numberList = new ArrayList<Integer>();
		for(int i = 1; i<string.size();i++) {
			String chimps = string.get(i);
			String numbers[] = chimps.split(",");
			numberList.add(Integer.parseInt(numbers[0]));
			numberList.add(Integer.parseInt(numbers[1]));
		}
		return numberList;
	}
    public static void output(int[][]array)
	{
		File file = new File("output.txt");
		FileOutputStream stream = null;
		try {
			stream = new FileOutputStream(file);
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		}
		PrintWriter writer = new PrintWriter(stream);
		/*for(int i = 0; i<edgeCount; i++)
		 {
		     for(int j = 0; j<edgeCount; j++)
		     {
		         writer.print(edges[i][j]+",");
		     }
		     writer.println();
		 }*/
		writer.print(Arrays.deepToString(array));
		writer.close();
		try {
			stream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
      
 // Driver method to 
 public static void main(String args[]) 
 { 
	 ArrayList<Integer> inst = format();
     ArrayList<Integer> answer = new ArrayList<Integer>();
     chimps g = new chimps(edgeCount+1); 
     // Build my Graph
     for(int i = 1; i<inst.size();i+=2)
     {
    	 g.addEdge(inst.get(i-1), inst.get(i));
     }
     // Build my Library
     for(int i = 1; i<=edgeCount;i++) 
     {
    	 start = i;
    	 g.search(i);
    	 counter1++;
     }
     System.out.println("edges before removal "+Arrays.deepToString(edges));
     System.out.println("paths before removal "+Arrays.deepToString(paths));
     // Ignore any nodes with no paths back to itself
     for(int i = 0; i<edgeCount; i++) 
     {
    	 if(paths[i][0]==0)
    	 {
    		 edges[i][0]=0;
    	 }
     }
     // removes the values that connect to each node from nodes DFS
	 for(int edge = 0; edge<edgeCount; edge++) 
     {
		 for(int path = 0; path<edgeCount; path++) 
    	 {
    		 for(int i = 0;i<edgeCount;i++ ) 
    		 {
    			 if(paths[path][edge]==edges[path][i]&&paths[path][edge]!=0)
    			 {
    				 if(i!=0)
    				 {
    				 edges[path][i]=0;
    				 }
    			 }
    		 }
 
    	 }
     }
	 System.out.println("edges before 2nd removal"+Arrays.deepToString(edges));
     System.out.println("paths before 2nd removal"+Arrays.deepToString(paths));
     // check secondary level     s
	 for(int edge = 0; edge<edgeCount; edge++) 
     {
		 for(int i = 1;i<edgeCount;i++ ) 
		 {
			if(edges[edge][0]!=0)
			{
				//System.out.println(edges[edge][i]+":"+edges[edges[edge][i]-1][i]);
				if(edges[edge][i]!=0) 
				{
					for(int j = 0; j<edgeCount;j++) 
					{
						if(paths[edges[edge][i]-1][j]==paths[edge][i])
						{
							// double check it runs
							if(paths[edges[edge][i]-1][j]!=0)
							{
								for(int k = 0; k<edgeCount;k++)
								{
									if(paths[edge][k]==0)
									{
										paths[edge][k]=paths[edges[edge][i]-1][j];
										//System.out.println(paths[edge][k]);
										break;
									}	
								}
							}
						}
					}
				}
			}
		 }
     }
	 System.out.println("edges after "+Arrays.deepToString(edges));
	 //output(edges);
     System.out.println("paths after "+Arrays.deepToString(paths));
     // Final Check
     for(int edge = 0; edge<edgeCount; edge++) 
     {
    	 boolean check = true;
    	 for(int i = 1; i<edgeCount;i++)
    	 {
    	 	if(edges[edge][0]==edge+1)
    	 	{
    			 if(edges[edge][i]!=0)
    			 {
    				 check = false;
    				 break;
    			 }
	    	 }
    	 	else
    	 	{
    	 		check=false;
    	 		break;
    	 	}
    	 }
    	 if(check) {
    		 answer.add(edge+1);
    	 }
    	 
     }
     

     System.out.println(answer);
 }
 
} 
