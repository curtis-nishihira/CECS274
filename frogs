import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class PictureFrogs 
{
	public static void main(String[] args)  
    {
	ArrayList<String> one = new ArrayList<String>();
	one = getInput();
	
	// Initializes two arrayLists to hold the values of steps and wanted outcome
	ArrayList<Integer> numList = new ArrayList<Integer>();
	ArrayList<String> charList = new ArrayList<String>();
	
	// Holds values for the numbers of steps and number of frogs
	// Number of steps used to setup arrayLists
	int numFrogs = Integer.parseInt(one.get(0));
	int numMoves = Integer.parseInt(one.get(1));
	
	numMoves = numFrogs*numMoves;
	int possible = (numMoves/numFrogs);
	int start = 0;
	int [][] totalAnswer = new int[numFrogs][];
	
	//adds steps to numList
	for(int num = 2; num<numMoves+2;num++) 
	{
		numList.add(Integer.parseInt(one.get(num)));
	}
	Collections.sort(numList, Collections.reverseOrder());
	
	//adds characters to Charlist
	for(int move = numMoves+2;move<one.size();move++) 
	{
		charList.add(one.get(move));
	}
	
	for(int frogs =0; frogs<numFrogs; frogs++)
	{
		// Declares array that will hold answer for each frog case		
		int [] answer = new int[possible];
		// Declares each list for each frog case 
		ArrayList<Integer>tempNumList = new ArrayList<Integer>();
		ArrayList<Character>tempCharList = new ArrayList<Character>();
		for(int j=0;j<possible;j++)
		{
		  	tempNumList.add(numList.get(0));
			numList.remove(0);
			tempCharList.add(charList.get(j).charAt(frogs));
		}
		// Tracking every time the sign changes
		// Need to reset the value of start 
		for(int value=0; value<tempCharList.size()-1;value++)
		{
			if(tempCharList.get(value+1)!=tempCharList.get(value))
			{
				start = start+1;
			}
		}
		//System.out.println(tempCharList);
		//System.out.println(tempNumList);
	    int change = start;
	    start = 0;
	    if(tempCharList.get(0)=='-')
	    {
	    	answer[0]=0-tempNumList.get(change);
	    	tempNumList.remove(change);	    	
	    }
	    else
	    {
	    	answer[0]=tempNumList.get(change);
	    	tempNumList.remove(change);
	    }
	    int range = tempNumList.size();
	    //System.out.println(Arrays.toString(answer));
	    for(int i = 0; i<range; i++) 
	    {
	    	if(tempCharList.get(i)==tempCharList.get(i+1))
	    	{
	    		answer[i+1]=tempNumList.get(change); 
	    		tempNumList.remove(change);
	    		if(tempCharList.get(i)=='-')
	    		{
	    			answer[i+1]=0-answer[i+1];
	    		}
	    	}
	    	else if (tempCharList.get(i)!=tempCharList.get(i+1))
	    	{
	    		if(tempCharList.get(i+1)=='+')
	    		{
	    			answer[i+1]= tempNumList.get(change-1);
	        		change = change - 1; 
	        		tempNumList.remove(change);
	    		}
	    		else if(tempCharList.get(i+1)=='-')
	    		{
	    			answer[i+1]= 0-tempNumList.get(change-1);
	        		change = change - 1; 
	        		tempNumList.remove(change);
	        	}
	    	}
	    }
	    //int first = 0;
	    // for the alternating at first
    	for(int first=0;first<tempCharList.size();first++)
    	{
			if(tempCharList.get(0)==tempCharList.get(first))
			{
    			if (first % 2 != 0) 
				{
					answer[first]=0-answer[first];
					//System.out.println("error");
				}
			}
			else
			{
				break;
			}
	    }
	    // for the alternating after change
    	// both should be preset to opposite before change 
	    totalAnswer[frogs]=answer;
	    //System.out.println("before alternations"+Arrays.toString(answer));
	    for(int check = 0; check<tempCharList.size()-3;check++)
	    {
	    	if(tempCharList.get(check)!=tempCharList.get(check+1))
	    	{
	    		if(tempCharList.get(check+1)==tempCharList.get(check+2))
	    		{
	    			if(tempCharList.get(check+2)==tempCharList.get(check+3)) 
	    			{
	    				answer[check+3]=0-answer[check+3];
	    				int point = check + 3; 
    					for(int fix = check+4; fix<tempCharList.size();fix++)
    					{
	    					if(tempCharList.get(point)==tempCharList.get(fix))
	    					{
    							if (fix % 2 != 0) 
	    						{
	    							answer[fix]=0-answer[fix];
	    						}
	    					}
	    					else
	    					{
	    						break;
	    					}
    					}
	    				
	    			}
	    		}
	    	}
	    }
	    //System.out.println("before sum"+Arrays.toString(answer));
	    // Fix this
	    int sum = answer[0];
	    System.out.println(answer[0]);
	    boolean right = true;
		//while(right == true)
		//{
	    	for(int i = 1; i<answer.length;i++) 
			    {
			    	sum = sum+answer[i];
			    	System.out.println("i "+answer[i]);
			    	if(sum<0 && tempCharList.get(i)=='+')
			    	{
			    		System.out.println("sum1 "+sum);
			    		sum = sum-answer[i-1];
			    		answer[i-1]=0-answer[i-1];
			    		sum = sum + answer[i-1];
			    		System.out.println("sum2 "+sum);
			    	}
			    	else if(sum>0 && tempCharList.get(i)=='-')
			    	{
			    		System.out.println("sum1 "+sum);
			    		sum = sum-answer[i-1];
			    		answer[i-1]=0-answer[i-1];
			    		sum = sum + answer[i-1];
			    		System.out.println("sum2 "+sum);
			    		//System.out.println("error2");
			    	}
			    
	    	//for(int i = 1; i<answer.length;i++)
	    	//{
		    		if((tempCharList.get(i)=='-' && sum>0)||(sum<0 && tempCharList.get(i)=='+'))
			    	{
			    		System.out.println("index: "+i+":"+tempCharList.get(i));
			    		System.out.println("sum: "+sum);
			    		System.out.println("answer: "+answer[i-1]);
			    		//System.exit(0);
			    		//right = false;
			    		
			    	}
	    	}
	    	
		//}
		/*int sum1 = answer[0];
		for(int i = 1; i<answer.length;i++)
		{
			sum1 = sum1+answer[i];
			if((tempCharList.get(i)=='-' && sum1>0)||(sum1<0 && tempCharList.get(i)=='+'))
	    	{
				System.out.println("error");
				System.out.println("index: "+i+":"+tempCharList.get(i));
				System.out.println("sum: "+sum1);
	    		System.out.println("answer: "+answer[i-1]);
	    	}
		}*/
	    System.out.println(tempCharList);
	    System.out.println(Arrays.toString(answer));
	}
	//System.out.println(Arrays.deepToString(totalAnswer));
	output(totalAnswer);
	// getInput for reading file and printing to input ArrayList 	
    }	
	public static ArrayList<String> getInput() 
	{
		ArrayList<String> input = new ArrayList<String>();
		File file = new File ("input.txt");
		try 
		{
			Scanner scan = new Scanner(file);
			while(scan.hasNextLine())
			{
	    		input.add(scan.nextLine());
	    	}
			scan.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		return input;
	}
	// Takes in the nested array and writes.format answer to file
	public static void output(int[][]array)
	{
		File file = new File("output.txt");
		FileOutputStream stream = null;
		try {
			stream = new FileOutputStream(file);
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		}
		PrintWriter writer = new PrintWriter(stream);
		for(int i =0; i<array[0].length;i++)
		{
			writer.print(array[0][i]);
			for(int j = 1; j<array.length;j++) 
			{
				writer.print(","+array[j][i]);
			}
			writer.println();
		}
		writer.close();
		try {
			stream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
