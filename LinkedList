
public class LinkedListQueue
{
	// Declares a private object Node with first and last name 
	private Node firstName,lastName;
	// Constructor for initializing the Nodes first name and last name
	// Takes in no parameters
	public LinkedListQueue()
	{
		firstName = null;
		lastName = null;
	}
	// Declares public boolean is Empty to show if the node is empty
	// Takes in no parameters
	// returns firstName boolean
	public boolean isEmpty()
	{
	return firstName == null;
	}
	// Declares add method to create a new node to form a linked list
	// Takes in parameters of an object person defined at info
	// creates a node if boolean is empty comes out as true
	// otherwise takes in next last name 
	// returns nothing
	void add(Person info)
	{
		Node node = new Node(info);
		if(isEmpty())
		{
			firstName = lastName = node;
		}
		else
		{
		lastName.next = node;
		lastName = node;
		}
	}
	// Declares queue size method for retrieving the size of the linked list or how many nodes there are
	// Declares a local integer defined as size at 0
	// Declares a local node defined as first Name 
	// Utilizes while loop to increase size every time there is another node
	// returns the size integer
	// takes no parameter
	public int queueSize()
	{
		int size = 0; 
		Node node = firstName;
		while(node!=null)
		{
			size++;
			node = node.next;
		}
		return size;
	}
	// Declares a method remove to remove names from the queue of nodes
	// takes no parameter
	// Utilizes if statements to set first and last name to null if they are already not null
	// returns the string defined at the person node
	public Person remove()
	{
		if(isEmpty()) 
		{
			return null;
		}
		else
		{
			Person string = firstName.info;
			firstName = firstName.next;
			if(firstName == null)
			{
				lastName = null;
			}
			return string;
		}
	}
	// Declares a method peek to show who is next on the queue
	// takes no parameter
	// Utilizes if statement to return the first name of the next node available if node is not empty
	// returns the first name of the next person object
	public Person peek()
	{
		if(isEmpty())
		{
			return null;
		}
		else
		{
			return firstName.info;
		}
	}
	// @Overrride method for making the linked list of nodes readable for the console
	// Declares an empty string defined as string
	// Declares an node filled with first name defined as node
	// Utilizes if and while statements to add nodes to a string every time if doesn't return null
	// takes no parameter
	// returns the final string
	public String toString()
	{
		String string = "";
		Node node = firstName;
		if(node!=null)
		{
			string += " "+node.info;
			node = node.next;
			while(node!=null) {
				string += "\n" + node.info;
				node = node.next;
			}
		}
		return string;
	}
	
}
// Created class for Node or tracking in the linked list
public class Node
{
	// public object person defined as info
	public Person info;
	// public object Node defined as next
	public Node next;
	// Node constructor that takes parameter object Person defined at info
	// Initializes info as this info as itself
	// Initializes Node object next as null or nothing
	Node(Person info)
	{
		this.info = info;
		this.next = null;
	}
}

	
